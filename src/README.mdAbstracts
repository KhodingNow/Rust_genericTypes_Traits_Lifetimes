The largest_i32 function is the one we extracted that finds the largest i32 in a slice. The 'largest_char' function finds the largest char in a slice. The function bodies have the same code, so lets eliminate duplication by introducing a generic type parameter in a single function.

To parameterize the types in a new single function, we need to name the type parameter, just as we do for the valueparameter to a function. You can use any identifier as a type parameter name. But we'll use 'T' because, by convention, type parameter name in Rust ae short, often just one letter, and Rust's type-naming conventions in UpperCamelCase. Short for type, 'T' is the default choice of most Rust programmers.

When you use parameter in the body of a function, we have to declare the parameter name in the signature so the compiler knows what the name means. Similarly, when we use a parameter in a function signature, we have to declare the type parameter name before we use it. To define tha generic 'largest' function, we place type name declarations inside angle brackets, '<>', between the name of the function and the parameter list, like this:

fn largest <T>(list: &[T]) -> &T {}

We read this definition as: the function 'largest' is generic over some type T. This function has one parameter named 'list', which is a slice of values of type 'T'. The 'largest' function will return a reference to a value of the same type 'T'.

The code below shows a combined 'largest' function definition using the generic data type in its signature. It also shows how we can call the function with either a slice of 'i32' values or 'char' values...Note: This code won't compile, butt will fix later.

    fn largest<T>(list: &[T]) -> &T {
    let mut largest = &list[0];

    for item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];

    let result = largest(&number_list);
    println!("The largest number is {result}");

    let char_list = vec!['y', 'm', 'a', 'q'];

    let result = largest(&char_list);
    println!("The largest char is {result}");
}

/// THIS IS THE ERRO from cmpiling the code:

$ cargo run
   Compiling chapter10 v0.1.0 (file:///projects/chapter10)
error[E0369]: binary operation `>` cannot be applied to type `&T`
 --> src/main.rs:5:17
  |
5 |         if item > largest {
  |            ---- ^ ------- &T
  |            |
  |            &T
  |
help: consider restricting type parameter `T`
  |
1 | fn largest<T: std::cmp::PartialOrd>(list: &[T]) -> &T {
  |             ++++++++++++++++++++++
