A trait defines the functionality a particular type has and can share with other types. We can use traits to define shared behaviour in an abstract way. We can use 'trait bounds' to specify that a generic type can be any type that has certain behaviour.
- NOTE: a trait is similar to INTERFACES in other languages, with some differences.
Let us say we have multiple structs that hold various kinds and amouonts of text: a 'NewsArticle' struct that holds a news story filed in a particulaer location and a 'Tweet' that can have, at most, 280 characters along with metadata that indicates whether it was a new tweet, a retweet, or a reply to another tweet.

We want to make a media aggregator library crate named 'aggregator' that can can display summaries of data that might be stored in 'NewsArticle' or 'Tweet' instance. To do this, we need a summary from each type, and we'll request that summary by calling a 'summarise' method on an instance.


